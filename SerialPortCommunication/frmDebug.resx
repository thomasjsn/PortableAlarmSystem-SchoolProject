<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCmMKCgpRAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAMmMEA0rCCwpN0QQDMc8BACu2AAAoTwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAgICCGERERKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADhYWFqEUFBR7AAAABwAA
        AAAAAAAAAAAAAAAADxYDAEPVAgFc/wMDZv4DA1r/BgZS/wAATf4BAEb/AwA+xAAAAAUAAAAAAAAAAAAA
        AAgKCgogLS0tpCcnJ10AAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0d
        Ha8VFRW7BAQEIQAAAAAAAAYTBQBT7wAAXf4AAGz/AAB0/wQEXv8CAlP/AABc/wAAWv8AAFb/BQBS3wAA
        AAUAAAAAICAgaiEhIbYmJiZdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIBQUFO0AAAADAAAAAAYAWNEBAR3/AABB/wAAfP8AAE7/BgZD/wEBFf8AAFP/AABq/wAA
        Sv8EBCD/BgBavgAAAAAbGxtZKCgo1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        G///3/v//9/r///f+///v/3///////////8=
</value>
  </data>
</root>